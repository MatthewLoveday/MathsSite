<% include ../partials/header %>

<div class="row">

	<div id="timeHolder" class="col s2 z-depth-2">
		<h3>timer</h3>
		<hr>
	</div>

	<div id="inputPad" class="col s6 offset-s3 z-depth-2">
		<h4>Input Pad</h4>
		<hr>
		<table>
			<tr>
				<td>
					<span id="inpPad00">\sqrt{x}</span>
				</td>
				<td>
					<span id="inpPad01">\sqrt{x}</span>
				</td>
				<td>
					<span id="inpPad02">\sqrt{x}</span>
				</td>
			</tr>
			<tr>
				<td>
					<span id="inpPad10">\sqrt{x}</span>
				</td>
				<td>
					<span id="inpPad11">\sqrt{x}</span>
				</td>
				<td>
					<span id="inpPad12">ax^2 + bx + c = 0</span>
				</td>
			</tr>
		</table>
	</div>

	<div class="col s8 offset-s2">
		<div class="row">
			<h1>Show test page</h1>
		</div>
		<div class="row">
		</div>
		<div class="row">
			<form action="/users/<%= testData.userID %>/tests/results" method="POST">
				<div class="col s6 offset-s3 center-align">
					<div class="row">
						<input type="checkbox" id="endTest" required/>
						<label for="endTest">Submission checkbox</label>
					</div>
					<div class="row">
						<button class="btn waves-effect waves-light modal-trigger" type="submit" name="action">Submit
							<i class="material-icons right">send</i>
						</button>
					</div>
				</div>
				<div class="hide">
				</div>
			</form>
		</div>
	</div>
</div>



<script>
	$(document).ready(function() {
		var id;
		console.log($("#inputPad table tr").length);
		for(var i = 0;i < $("#inputPad  table  tr").length;i++){
			console.log($("#inputPad  table  tr:nth-child(" + (i + 1) + ") td").length);
			for(var t = 0;t < $("#inputPad table tr:nth-child(" + (i + 1) + ") td").length;t++){
				console.log("inpPad" + i + t);
				MQ.StaticMath(document.getElementById("inpPad" + i + t));
			}
		}


		var topicsHolder = <%- JSON.stringify(testData.topics) %>;

		<% if(testData.options.topicTimer){ %>
			$("body > .row > div:nth-child(1)").append("<ul class='section table-of-contents'></ul>");
		<% } %>

		var newInputs = [];
		var questionsMethods = [];
		var partPositionings = [];

		var examBoard = $("<input>").attr({
			name: "examBoard",
			type: "text",
			value: "<%= testData.examBoard %>",
			readonly: "true"
		});
		$("form > div:last").append(examBoard);

		var module = $("<input>").attr({
			name: "module",
			type: "text",
			value: "<%= testData.module %>",
			readonly: "true"
		});
		$("form > div:last").append(module);

		var numberOfTopics = $("<input>").attr({
			name: "numberOfTopics",
			type: "text",
			value: "<%= testData.topics.length %>",
			readonly: "true"
		});
		$("form > div:last").append(numberOfTopics);

	<% for(var i = 0;i < testData.topics.length;i++){ %>
	
		partPositionings.push([]);
		questionsMethods.push([]);
		newInputs.push([]);

		var newTopic = $("<input>").attr({
			name: "topic<%= i %>",
			type:  "text",
			value: "<%= testData.topics[i].name %>",
			readonly: "true"
		});
		$("form > div:last").append(newTopic);

		var numberOfQuestions = $("<input>").attr({
			name: "topic<%= i %>numberOfQuestions",
			type: "text",
			value: "<%= testData.topics[i].questions.length %>",
			readonly: "true"
		});
		$("form > div:last").append(numberOfQuestions);

		$("body > .row > div:nth-child(3) > div:nth-child(2)").append("<div id='topic<%= i %>OnScreen' class='row section scrollspy'><% if(testData.options.topicNames){ %><h3><%= testData.topics[i].name %></h3><% } %></div>");

		<% if(testData.options.topicTimer){ %>
			$("body > .row > div:nth-child(1) > ul").append("<li><a id='topicTimer<%= i %>' href='#topic<%= i %>OnScreen'><h5>topicTimer(<%= i %>)</h5></a></li>");
		<% } %>
		
		<% for(var t=0;t< testData.topics[i].questions.length;t++){ %>

			partPositionings[<%= i %>].push([]);
			questionsMethods[<%= i %>].push(-1);
			
			var newQuestion = $("<input>").attr({
				name:"topic<%= i %>question<%= t %>",
				type:"text",
				value:"<%= testData.topics[i].questions[t]._id %>",
				readonly: "true"
			});
			$("form > div:last").append(newQuestion);

		
			newInputs[<%= i %>].push([]);

			var numberOfParts = $("<input>").attr({
				id: "topic<%= i %>question<%= t %>numberOfParts",
				name: "topic<%= i %>question<%= t %>numberOfParts",
				type: "number",
				value: "1",
				readonly: "true"
			});
			$("form > div:last").append(numberOfParts);
		
			var newTxtInp = $("<input>").attr({
				id:"itopic<%= i %>question<%= t %>part0",
				name:"itopic<%= i %>question<%= t %>part0",
				type:"text",
				readonly: "true"
			});
			$("form > div:last").append(newTxtInp);

			$("#topic<%= i %>OnScreen").append("<div class='row'><div id='topic<%= i %>Question<%= t %>OnScreen' class='questionInfo col s6 offset-s3'><img src='<%= testData.topics[i].questions[t].content %>'><% if(testData.options.questionLength){ %><p>Number of markable parts:<% for(var u=0;u<testData.topics[i].questions[t].methods.length - 2;u++){ %><%= testData.topics[i].questions[t].methods[u].length %>,<% } %> <%= testData.topics[i].questions[t].methods[testData.topics[i].questions[t].methods.length - 2].length %> and <%= testData.topics[i].questions[t].methods[testData.topics[i].questions[t].methods.length - 1].length %></p><% } %></div><div class='col s8 offset-s2'><p id='topic<%= i %>question<%= t %>part0'><span id='topic<%= i %>question<%= t %>part0span'></span></p></div><hr class='col s8 offset-s2'></div>");
			

			newInputs[<%= i %>][<%= t %>][0] = MQ.MathField(document.getElementById("topic<%= i %>question<%= t %>part0span"), {
				handlers: {
					enter: function() {
						if(newInputs[<%= i %>][<%= t %>].length == 1)
						{
							$("#topic<%= i %>question<%= t %>numberOfParts").val(2);
							newInp(<%= i %>,<%= t %>,1);
						}
						else
						{
							newInputs[<%= i %>][<%= t %>][1].focus();
						}
					},
					edit: function() {
						var latexHolder = newInputs[<%= i %>][<%= t %>][0].latex();
						$("#itopic<%= i %>question<%= t %>part0").val(latexHolder);

						for(var j=0;j<partPositionings[<%= i %>][<%= t %>].length;j++){
							if(partPositionings[<%= i %>][<%= t %>][j].pos == 0){
								partPositionings[<%= i %>][<%= t %>].splice(j,1);
								$("#topic<%= i %>question<%= t %>part0 > span:nth-child(2)").remove();
								if(!partPositionings[<%= i %>][<%= t %>][0]){
									questionsMethods[<%= i %>][<%= t %>] = -1;
								}
								break;
							}
						}

						var methodsHolder = topicsHolder[<%= i %>].questions[<%= t %>].methods;

						if(questionsMethods[<%= i %>][<%= t %>] != -1){
							methodsHolder = methodsHolder[questionsMethods[<%= i %>][<%= t %>]];
							markedPartLabel0:
							for(var q = 0;q < methodsHolder.length;q++){
								checkingMethodPartLabel:
								for(var u = 0;u < latexHolder.length;u++){
									for(var h = latexHolder.length;h > 0;h--){
										if(latexHolder.slice(u,h) == methodsHolder[q].content){
											for(var j=0;j<partPositionings[<%= i %>][<%= t %>].length;j++){
												if(partPositionings[<%= i %>][<%= t %>][j].part == q || (partPositionings[<%= i %>][<%= t %>][j].part < q && partPositionings[<%= i %>][<%= t %>][j].pos > 0) || (partPositionings[<%= i %>][<%= t %>][j].part > q && partPositionings[<%= i %>][<%= t %>][j].pos < 0)){
													break checkingMethodPartLabel;
												}
											}
											console.log("Found answer:(<" + latexHolder.slice(u,h) + "> : <" + methodsHolder[q].content + ">)");
											$("#topic<%= i %>question<%= t %>part0span").after("<span>" + methodsHolder[q].mark + "<i class='material-icons'>check</i></span>");
											partPositionings[<%= i %>][<%= t %>].push({pos: 0,part: q});
											break markedPartLabel0;
										}
									}
								}
							}
						}else{
							markedPartLabel1:
							for(var p = 0;p < methodsHolder.length;p++){
								for(var q = 0;q < methodsHolder[p].length;q++){
									for(var u = 0;u < latexHolder.length;u++){
										for(var h = latexHolder.length;h > 0;h--){
											if(latexHolder.slice(u,h) == methodsHolder[p][q].content){
												console.log("Found answer:(<" + latexHolder.slice(u,h) + "> : <" + methodsHolder[p][q].content + ">)");
												$("#topic<%= i %>question<%= t %>part0span").after("<span>" + methodsHolder[p][q].mark + "<i class='material-icons'>check</i></span>");
												partPositionings[<%= i %>][<%= t %>].push({pos: 0,part: q});
												questionsMethods[<%= i %>][<%= t %>] = p;
												break markedPartLabel1;
											}
										}
									}
								}
							}	
						}
					}
				}
			});
		<% } %> 
	<% } %>
		

		<% if(testData.options.topicTimer){ %>

			var timeLeft = [{hrs:0,mins:0,secs:0}];
			<% for(var i = 1;i < testData.topics.length + 1;i++){ %>
				timeLeft.push({hrs:0,mins:0,secs:0});
				<% for(var t = 0;t < testData.topics[i - 1].questions.length;t++){ %>
					timeLeft[<%= i %>].mins += <%= testData.topics[i - 1].questions[t].mark %>;
					if(timeLeft[<%= i %>].mins >= 60){
						timeLeft[<%= i %>].mins -= 60;
						timeLeft[<%= i %>].hrs++;
					}
				<% } %>
				$("#topicTimer" + (<%= i %> - 1) + "> h5").text(timeLeft[<%= i %>].hrs + ":" + timeLeft[<%= i %>].mins + ":" + timeLeft[<%= i %>].secs);
				timeLeft[0].mins += timeLeft[<%= i %>].mins;
				if(timeLeft[0].mins >= 60){
					timeLeft[0].mins -= 60;
					timeLeft[0].hrs++;
				}
			<% } %>
			$("#timeHolder > h3").text(timeLeft[0].hrs + ":" + timeLeft[0].mins + ":" + timeLeft[0].secs);
			//------------------------------------------------------------------------------------------------------------------------
			var timer = setInterval(() => {
				for(var i=1;i<<%= testData.topics.length %> + 1;i++){
					if($("#topicTimer" + (i - 1)).hasClass("active")){

						if(timeLeft[i].secs == 0){
							timeLeft[i].secs = 59;
							if(timeLeft[i].mins == 0){
								timeLeft[i].mins = 59;
								timeLeft[i].hrs--;
							}else{
								timeLeft[i].mins--;
							}
						}else{
							timeLeft[i].secs--;
						}
						$("#topicTimer" + (i-1) + "> h5").text(timeLeft[i].hrs + ":" + timeLeft[i].mins + ":" + timeLeft[i].secs);

						if(timeLeft[0].secs == 0){
							timeLeft[0].secs = 59;
							if(timeLeft[0].mins == 0){
								timeLeft[0].mins = 59;
								timeLeft[0].hrs--;
							}else{
								timeLeft[0].mins--;
							}
						}else{
							timeLeft[0].secs--;
						}
						$("#timeHolder > h3").text(timeLeft[0].hrs + ":" + timeLeft[0].mins + ":" + timeLeft[0].secs);
					}
				}
			}, 1000);
			//------------------------------------------------------------------------------------------------------------------------
		<% }else if(testData.options.timer){ %>

			var timeLeft = {hrs:0,mins:0,secs:0};
			<% for(var i = 0;i < testData.topics.length;i++){ %>
				<% for(var t = 0;t < testData.topics[i].questions.length;t++){ %>
					timeLeft.mins += <%= testData.topics[i].questions[t].mark %>;
					if(timeLeft.mins >= 60){
						timeLeft.mins -= 60;
						timeLeft.hrs++;
					}
				<% } %>
			<% } %>
			$("#timeHolder > h3").text(timeLeft.hrs + ":" + timeLeft.mins + ":" + timeLeft.secs);
			//------------------------------------------------------------------------------------------------------------------------
			var timer = setInterval(() => {
				if(timeLeft.secs == 0){
					timeLeft.secs = 59;
					if(timeLeft.mins == 0){
						timeLeft.mins = 59;
						timeLeft.hrs--;
					}else{
						timeLeft.mins--;
					}
				}else{
					timeLeft.secs--;
				}
				$("#timeHolder > h3").text(timeLeft.hrs + ":" + timeLeft.mins + ":" + timeLeft.secs);
			}, 1000);
			//------------------------------------------------------------------------------------------------------------------------
		<% } %>

		$('body').scroll(function() { 
			$('#timeHolder').css('top', $(this).scrollTop());
		});
		$('.scrollspy').scrollSpy();
	
		function newInp(i,t,count)
		{
			$("#topic" + i + "question" + t + "part" + (count - 1)).after("<p id='topic" + i + "question" + t + "part" + count + "'><span id='topic" + i + "question" + t + "part" + count + "span'></span></p>");

			var newTxtInp = $("<input>").attr({
				id: "itopic" + i + "question" + t + "part" + count,
				name: "itopic" + i + "question" + t + "part" + count,
				type: "text",
				readonly: "true"
			});
			$("#itopic" + i + "question" + t + "part" + (count-1)).after(newTxtInp)

			newInputs[i][t][count] = MQ.MathField(document.getElementById("topic" + i + "question" + t + "part" + count + "span"), {
				handlers: {
					enter: function() {
						if(newInputs[i][t].length == count + 1 && newInputs[i][t].length <= 60){
							$("#topic"+i+"question"+t+"numberOfParts").val((i, val) => {
								return +val+1;
							});
							newInp(i,t,(count+1));
						}
						else{
							newInputs[i][t][count+1].focus()	
						}
					},
					edit: function() {
						var latexHolder = newInputs[i][t][count].latex();
						$("#itopic"+i+"question"+t+"part"+count).val(latexHolder);

						for(var j=0;j<partPositionings[i][t].length;j++){
							if(partPositionings[i][t][j].pos == count){
								partPositionings[i][t].splice(j,1);
								$("#topic" + i + "question" + t + "part" + count + " > span:nth-child(2)").remove();
								if(!partPositionings[i][t][0]){
									questionsMethods[i][t] = -1;
								}
								break;
							}
						}

						var methodsHolder = topicsHolder[i].questions[t].methods;

						if(questionsMethods[i][t] != -1){
							methodsHolder = methodsHolder[questionsMethods[i][t]];
							markedPartLabel0:
							for(var q = 0;q < methodsHolder.length;q++){
								checkingMethodPartLabel:
								for(var u = 0;u < latexHolder.length;u++){
									for(var h = latexHolder.length;h > 0;h--){
										if(latexHolder.slice(u,h) == methodsHolder[q].content){
											for(var j = 0;j < partPositionings[i][t].length;j++){
												console.log("(" + partPositionings[i][t][j].part + " : " + q + ")");
												if(partPositionings[i][t][j].part == q || (partPositionings[i][t][j].part < q && partPositionings[i][t][j].pos > count) || (partPositionings[i][t][j].part > q && partPositionings[i][t][j].pos < count)){
													console.log("Answer already found");
													break checkingMethodPartLabel;
												}
											}
											console.log("Found answer:(<" + latexHolder.slice(u,h) + "> : <" + methodsHolder[q].content + ">)");
											$("#topic" + i + "question" + t + "part" + count + "span").after("<span>" + methodsHolder[q].mark + "<i class='material-icons'>check</i></span>");
											partPositionings[i][t].push({pos: count,part: q});
											break markedPartLabel0;
										}
									}
								}
							}
						}else{
							markedPartLabel1:
							for(var p = 0;p < methodsHolder.length;p++){
								for(var q = 0;q < methodsHolder[p].length;q++){
									for(var u = 0;u < latexHolder.length;u++){
										for(var h = latexHolder.length;h > 0;h--){
											if(latexHolder.slice(u,h) == methodsHolder[p][q].content){
												console.log("Found answer:(<" + latexHolder.slice(u,h) + "> : <" + methodsHolder[p][q].content + ">)");
												$("#topic" + i + "question" + t + "part" + count + "span").after("<span>" + methodsHolder[p][q].mark + "<i class='material-icons'>check</i></span>");
												partPositionings[i][t].push({pos: count,part: q});
												questionsMethods[i][t] = p;
												break markedPartLabel1;
											}
										}
									}
								}
							}	
						}


						if(!(newInputs[i][t][count].latex()) && !(newInputs[i][t][count+1])){
							$("#topic"+i+"question"+t+"part"+count).remove();
							$("#itopic"+i+"question"+t+"part"+count).remove();
							$("#topic"+i+"question"+t+"numberOfParts").val(function( i, val ) {
								return +val-1;
							});
							newInputs[i][t].splice(count,1);
							newInputs[i][t][(count-1)].focus();
						}
					}
				}
			});
			newInputs[i][t][count].focus();
		}
		
	});
</script>

<style>
	body {
		margin-bottom: 12em;
	}
	img{
		width:100%;
		height:100%;
	}
	h1 {
		text-align:center;
	}
	body > .row > div:nth-child(3) h3 {
		text-align:center;
	}
	#timeHolder {
		position:fixed;
	}
	#inputPad{
		position: fixed;
		bottom: 0;
	}
	.highlighted{
		background-color: #d3e4ff;
	}
	.table-of-contents h6{
	   margin:0;
	}
	.table-of-contents h5{
	   margin:0;
	}
	.table-of-contents a{
	   margin:2%;
	}
	.questionInfo{
		background-color: #c8cace;
	}
</style>

<% include ../partials/footer %>